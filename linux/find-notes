File's  status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the
   -L option is in effect, the status-change time of the file it points to is always used.
-readable

-ctime n
   File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the  inter‐
   pretation of file status change times.

-empty File is empty and is either a regular file or a directory.

-executable
   Matches  files  which  are  executable and directories which are searchable (in a file name resolution sense).  This takes
   into account access control lists and other permissions artefacts which the -perm test ignores.  This test  makes  use  of
   the  access(2)  system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many sys‐
   tems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the  server.
   Because  this  test  is based only on the result of the access(2) system call, there is no guarantee that a file for which
   this test succeeds can actually be executed.

-false Always false.

-fstype type
   File is on a filesystem of type type.  The valid filesystem types vary among different versions  of  Unix;  an  incomplete
   list  of  filesystem  types  that  are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K,
   S52K.  You can use -printf with the %F directive to see the types of your filesystems.

-gid n File's numeric group ID is n.

-group gname
   File belongs to group gname (numeric group ID allowed).

-ilname pattern
   Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect,  this  test  returns
   false unless the symbolic link is broken.

-iname pattern
   Like  -name,  but  the  match  is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo',
   `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

-inum n
   File has inode number n.  It is normally easier to use the -samefile test instead.

-ipath pattern
   Like -path.  but the match is case insensitive.

-iregex pattern
   Like -regex, but the match is case insensitive.

-iwholename pattern
   See -ipath.  This alternative is less portable than -ipath.

-links n
   File has n hard links.

-lname pattern
   File is a symbolic link whose contents match
   -lname pattern
               File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.
               If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

        -mmin n
               File's data was last modified n minutes ago.

        -mtime n
               File's  data  was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the inter‐
               pretation of file modification times.

        -name pattern
               Base of file name (the path with the leading directories removed) matches shell  pattern  pattern.   Because  the  leading
               directories  are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will
               never match anything (you probably need to use -path instead).  A warning is issued if you try  to  do  this,  unless  the
               environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base
               name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the  files
               under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the
               fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is per‐
               formed  with  the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order to pro‐
               tect it from expansion by the shell.

        -newer file
               File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option  is  in  effect,
               the modification time of the file it points to is always used.

        -newerXY reference
               Succeeds  if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and
               Y can be any of the following letters:

               a   The access time of the file reference
               B   The birth time of the file reference
               c   The inode status change time of reference
               m   The modification time of the file reference
               t   reference is interpreted directly as a time

               Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are  not  implemented  on  all
               systems;  for  example  B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a
               fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to
               use  the  birth  time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you
               specify a test which refers to the birth time of files being examined, this test will fail for any files where  the  birth
               time is unknown.

        -nogroup
               No group corresponds to file's numeric group ID.

        -nouser
               No user corresponds to file's numeric user ID.

        -path pattern
               File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so,           will  print  an  entry  for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune
               rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories
               under it, and print the names of the other files found, do something like this:
                         find . -path ./src/emacs -prune -o -print
               Note  that  the pattern match test applies to the whole file name, starting from one of the start points named on the com‐
               mand line.  It would only make sense to use an absolute path name here if the relevant start point  is  also  an  absolute
               path.  This means that this command will never match anything:
                         find bar -path /foo/bar/myfile -print
               Find  compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.
               Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except  perhaps
               a  start  point  specified  on  the command line).  The predicate -path is also supported by HP-UX find and is part of the
               POSIX 2008 standard.

        -perm mode
               File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want  to  use  this
               form  for  symbolic  modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match
               files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely
               that  you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permis‐
               sion.  See the EXAMPLES section for some illustrative examples.

        -perm -mode
               All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is  usually  the
               way  in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES
               section for some illustrative examples.

        -perm /mode
               Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You  must  specify  `u',
               `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in
               mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

        -perm +mode
               This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

        -readable
               Matches files which are readable.  This takes into account access control lists and other permissions artefacts which  the
               -perm  test  ignores.   This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID
               mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use  of  the
               UID mapping information held on the server.

        -regex pattern
               File  name  matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a
               file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular  expressions
               understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

        -samefile name
               File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

        -size n[cwbkMG]
               File uses n units of space, rounding up.  The following suffixes can be used:

               `b'    for 512-byte blocks (this is the default if no suffix is used)

               -regex pattern
                          File  name  matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a
                          file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular  expressions
                          understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

                   -samefile name
                          File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

                   -size n[cwbkMG]
                          File uses n units of space, rounding up.  The following suffixes can be used:

                          `b'    for 512-byte blocks (this is the default if no suffix is used)

                          `c'    for bytes

                          `w'    for two-byte words

                          `k'    for Kibibytes (KiB, units of 1024 bytes)

                          `M'    for Mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)

                          `G'    for Gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)

                          The  size  does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear
                          in mind that the `%k' and `%b' format specifiers of -printf handle  sparse  files  differently.   The  `b'  suffix  always
                          denotes 512-byte blocks and never 1024-byte blocks, which is different to the behaviour of -ls.

                          The + and - prefixes signify greater than and less than, as usual; i.e., an exact size of n units does not match.  Bear in
                          mind that the size is rounded up to the next unit. Therefore -size -1M is not equivalent to -size -1048576c.   The  former
                          only matches empty files, the latter matches files from 0 to 1,048,575 bytes.

                   -true  Always true.

                   -type c
                          File is of type c:

                          b      block (buffered) special

                          c      character (unbuffered) special

                          d      directory

                          p      named pipe (FIFO)

                          f      regular file

                          l      symbolic  link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is
                                 broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

                          s      socket

                          D      door (Solaris)

                          To search for more than one type at once, you can supply the combined list of type letters separated by a comma  `,'  (GNU
                          extension).

                   -uid n File's numeric user ID is n.

                   -used n
                          File was last accessed n days after its status was last changed.

                   -user uname
                          File is owned by user uname (numeric user ID allowed).

                   -wholename pattern
                          See -path.  This alternative is less portable than -path.

                          -writable
                                 Matches  files which are writable.  This takes into account access control lists and other permissions artefacts which the
                                 -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers  which  do  UID
                                 mapping  (or  root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the
                                 UID mapping information held on the server.

                          -xtype c
                                 The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified,  true  if
                                 the  file  is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic
                                 links, -xtype checks the type of the file that -type does not check.

                          -context pattern
                                 (SELinux only) Security context of the file matches glob pattern.

                      ACTIONS
                          -delete
                                 Delete files; true if removal succeeded.  If the removal failed, an error message is issued.   If  -delete  fails,  find's
                                 exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

                                 Warnings:  Don't  forget that the find command line is evaluated as an expression, so putting -delete first will make find
                                 try to delete everything below the starting points you specified.  When testing a find command line that you later  intend
                                 to  use  with  -delete,  you  should explicitly specify -depth in order to avoid later surprises.  Because -delete implies
                                 -depth, you cannot usefully use -prune and -delete together.

                          -exec command ;
                                 Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to  the  command
                                 until  an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed
                                 everywhere it occurs in the arguments to the command, not just in arguments where it is alone,  as  in  some  versions  of
                                 find.   Both  of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the
                                 shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for  each
                                 matched  file.   The  command is executed in the starting directory.   There are unavoidable security problems surrounding
                                 use of the -exec action; you should use the -execdir option instead.

                          -exec command {} +
                                 This variant of the -exec action runs the specified command on the selected files,  but  the  command  line  is  built  by
                                 appending  each  selected  file name at the end; the total number of invocations of the command will be much less than the
                                 number of matched files.  The command line is built in much the same way that xargs builds its command  lines.   Only  one
                                 instance  of  `{}'  is  allowed within the command, and (when find is being invoked from a shell) it should be quoted (for
                                 example, '{}') to protect it from interpretation by shells.  The command is executed in the starting  directory.   If  any
                                 invocation  returns  a  non-zero  value  as  exit status, then find returns a non-zero exit status.  If find encounters an
                                 error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of  -exec
                                 always returns true.

                          -execdir command ;

                          -execdir command ;

                          -execdir command {} +
                                 Like  -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the
                                 directory in which you started find.  As with -exec, the {} should be quoted if find is being invoked from a shell.   This
                                 a  much  more  secure  method  for  invoking  commands, as it avoids race conditions during resolution of the paths to the
                                 matched files.  As with the -exec action, the `+' form of -execdir will build a command line  to  process  more  than  one
                                 matched  file,  but  any given invocation of command will only list files that exist in the same subdirectory.  If you use
                                 this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker  can  run
                                 any  commands  they  like  by leaving an appropriately-named file in a directory in which you will run -execdir.  The same
                                 applies to having entries in $PATH which are empty or which are not absolute directory names.  If any invocation returns a
                                 non-zero  value as exit status, then find returns a non-zero exit status.  If find encounters an error, this can sometimes
                                 cause an immediate exit, so some pending commands may not be run at all. The result of the action depends on whether the +
                                 or  the  ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only
                                 if command returns 0.

                          -fls file
                                 True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.
                                 See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

                          -fprint file
                                 True;  print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist,
                                 it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard  output
                                 and  standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See
                                 the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

                          -fprint0 file
                                 True; like -print0 but write to file like -fprint.  The output file is always created, even  if  the  predicate  is  never
                                 matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

                          -fprintf file format
                                 True;  like  -printf  but  write  to file like -fprint.  The output file is always created, even if the predicate is never
                                 matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

                          -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the  environment
                                 variable  POSIXLY_CORRECT  is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for informa‐
                                 tion about how unusual characters in filenames are handled.

                          -ok command ;
                                 Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command  is
                                 run, its standard input is redirected from /dev/null.

                                 The  response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or nega‐
                                 tive response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is  set,
                                 or  otherwise  from  find's message translations.  If the system has no suitable definition, find's own definition will be
                                 used.   In either case, the interpretation of the regular expression itself will be affected by the environment  variables
                                 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

                          -okdir command ;
                                 Like  -execdir  but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the
                                 command is run, its standard input is redirected from /dev/null.

                          -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find  into
                                 another  program and there is the faintest possibility that the files which you are searching for might contain a newline,
                                 then you should seriously consider using the -print0 option instead of -print.  See  the  UNUSUAL  FILENAMES  section  for
                                 information about how unusual characters in filenames are handled.


                                         -print0
                                                True; print the full file name on the standard output, followed by a null character (instead of the newline character that
                                                -print uses).  This allows file names that contain newlines or other types of white space to be correctly  interpreted  by
                                                programs that process the find output.  This option corresponds to the -0 option of xargs.

                                         -printf format
                                                True;  print  format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can
                                                be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than  %d,  and
                                                this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to
                                                be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.   The  escapes  and  directives
                                                are:

                                                \a     Alarm bell.

                                                \b     Backspace.

                                                \c     Stop printing from this format immediately and flush the output.

                                                \f     Form feed.

                                                \n     Newline.

                                                \r     Carriage return.

                                                \t     Horizontal tab.

                                                \v     Vertical tab.

                                                \0     ASCII NUL.

                                                \\     A literal backslash (`\').

                                                \NNN   The character whose ASCII code is NNN (octal).

                                                A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

                                                %%     A literal percent sign.

                                                %a     File's last access time in the format returned by the C `ctime' function.

                                                %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' func‐
                                                       tion.  The possible values for k are listed below; some of them might not be available on all systems, due to  dif‐
                                                       ferences in `strftime' between systems.

                                                       @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                                                       Time fields:
                                                       l      hour ( 1..12)

                                                       M      minute (00..59)

                                                       p      locale's AM or PM

                                                       r      time, 12-hour (hh:mm:ss [AP]M)

                                                       S      Second (00.00 .. 61.00).  There is a fractional part.

                                                       T      time, 24-hour (hh:mm:ss.xxxxxxxxxx)

                                                       +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is
                                                              given in the current timezone (which may be affected by setting the TZ environment variable).   The  seconds
                                                              field includes a fractional part.

                                                       X      locale's time representation (H:M:S).  The seconds field includes a fractional part.

                                                       Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                                                       Date fields:

                                                       a      locale's abbreviated weekday name (Sun..Sat)

                                                       A      locale's full weekday name, variable length (Sunday..Saturday)

                                                       b      locale's abbreviated month name (Jan..Dec)

                                                       B      locale's full month name, variable length (January..December)

                                                       c      locale's  date  and  time  (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to
                                                              preserve compatibility with that format, there is no fractional part in the seconds field.

                                                       d      day of month (01..31)

                                                       D      date (mm/dd/yy)

                                                       h      same as b

                                                       j      day of year (001..366)

                                                       m      month (01..12)

                                                       U      week number of year with Sunday as first day of week (00..53)

                                                       w      day of week (0..6)

                                                       W      week number of year with Monday as first day of week (00..53)

                                                       x      locale's date representation (mm/dd/yy)

                                                       y      last two digits of year (00..99)

                                                       Y      year (1970...)
                                                       %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of  the
                                                              filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

                                                       %c     File's last status change time in the format returned by the C `ctime' function.

                                                       %Ck    File's last status change time in the format specified by k, which is the same as for %A.

                                                       %d     File's depth in the directory tree; 0 means the file is a starting-point.

                                                       %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

                                                       %f     File's name with any leading directories removed (only the last element).

                                                       %F     Type of the filesystem the file is on; this value can be used for -fstype.

                                                       %g     File's group name, or numeric group ID if the group has no name.

                                                       %G     File's numeric group ID.

                                                       %h     Leading  directories  of file's name (all but the last element).  If the file name contains no slashes (since it is
                                                              in the current directory) the %h specifier expands to `.'.

                                                       %H     Starting-point under which file was found.

                                                       %i     File's inode number (in decimal).

                                                       %k     The amount of disk space used for this file in 1K blocks.  Since disk  space  is  allocated  in  multiples  of  the
                                                              filesystem  block  size  this  is  usually greater than %s/1024, but it can also be smaller if the file is a sparse
                                                              file.

                                                       %l     Object of symbolic link (empty string if file is not a symbolic link).

                                                       %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use,
                                                              but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference
                                                              between the actual value of the file's mode and the output of %m.   Normally you will want to have a  leading  zero
                                                              on this number, and to do this, you should use the # flag (as in, for example, `%#m').

                                                       %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

                                                       %n     Number of hard links to file.

                                                       %p     File's name.

                                                       %P     File's name with the name of the starting-point under which it was found removed.

                                                       %s     File's size in bytes.

                                                       %S     File's  sparseness.   This  is  calculated as (BLOCKSIZE*st_blocks / st_size).  The e


                                                       %p     File's name.

%P     File's name with the name of the starting-point under which it was found removed.

%s     File's size in bytes.

%S     File's  sparseness.   This  is  calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an
       ordinary file of a certain length is system-dependent.  However, normally sparse files will have values  less  than
       1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE
       is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On sys‐
       tems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

%t     File's last modification time in the format returned by the C `ctime' function.

%Tk    File's last modification time in the format specified by k, which is the same as for %A.

%u     File's user name, or numeric user ID if the user has no name.

%U     File's numeric user ID.

%y     File's type (like in ls -l), U=unknown type (shouldn't happen)

%Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

%Z     (SELinux only) file's security context.

%{ %[ %(
       Reserved for future use.

A  `%'  character followed by any other character is discarded, but the other character is printed (don't rely on this, as
further format characters may be introduced).  A `%' at the end of the format argument causes  undefined  behaviour  since
there  is  no  following  character.  In some locales, it may hide your door keys, while in others it may remove the final
page from the novel you are reading.

The %m and %d directives support the # , 0 and + flags, but the other directives do  not,  even  if  they  print  numbers.
Numeric  directives  that  do  not  support these flags include G, U, b, D, k and n.  The `-' format flag is supported and
changes the alignment of a field from right-justified (which is the default) to left-justified.

See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

-prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete  implies
-depth, you cannot usefully use -prune and -delete together.

-quit  Exit  immediately.   No child processes will be left running, but no more paths specified on the command line will be pro‐
cessed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command  lines  which  have  been
built  up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on
whether an error has already occurred.
