MANWIDTH=120 man2html pcresyntax | _send2md
node /data/0/projects/mandown/bin/../index.js
MANWIDTH=140 man --no-hyphenation --no-justification --encoding utf8 --troff-device=html pcresyntax     p { margin-top: 0; margin-bottom: 0; vertical-align: top } pre { margin-top: 0; margin-bottom: 0; vertical-align: top } table { margin-top: 0; margin-bottom: 0; vertical-align: top } h1 { text-align: center }  PCRESYNTAX

# PCRESYNTAX

[NAME](#NAME)  
[PCRE REGULAR EXPRESSION SYNTAX SUMMARY](#PCRE REGULAR EXPRESSION SYNTAX SUMMARY)  
[QUOTING](#QUOTING)  
[CHARACTERS](#CHARACTERS)  
[CHARACTER TYPES](#CHARACTER TYPES)  
[GENERAL CATEGORY PROPERTIES FOR \\p and \\P](#GENERAL CATEGORY PROPERTIES FOR \p and \P)  
[PCRE SPECIAL CATEGORY PROPERTIES FOR \\p and \\P](#PCRE SPECIAL CATEGORY PROPERTIES FOR \p and \P)  
[SCRIPT NAMES FOR \\p AND \\P](#SCRIPT NAMES FOR \p AND \P)  
[CHARACTER CLASSES](#CHARACTER CLASSES)  
[QUANTIFIERS](#QUANTIFIERS)  
[ANCHORS AND SIMPLE ASSERTIONS](#ANCHORS AND SIMPLE ASSERTIONS)  
[MATCH POINT RESET](#MATCH POINT RESET)  
[ALTERNATION](#ALTERNATION)  
[CAPTURING](#CAPTURING)  
[ATOMIC GROUPS](#ATOMIC GROUPS)  
[COMMENT](#COMMENT)  
[OPTION SETTING](#OPTION SETTING)  
[NEWLINE CONVENTION](#NEWLINE CONVENTION)  
[WHAT \\R MATCHES](#WHAT \R MATCHES)  
[LOOKAHEAD AND LOOKBEHIND ASSERTIONS](#LOOKAHEAD AND LOOKBEHIND ASSERTIONS)  
[BACKREFERENCES](#BACKREFERENCES)  
[SUBROUTINE REFERENCES (POSSIBLY RECURSIVE)](#SUBROUTINE REFERENCES (POSSIBLY RECURSIVE))  
[CONDITIONAL PATTERNS](#CONDITIONAL PATTERNS)  
[BACKTRACKING CONTROL](#BACKTRACKING CONTROL)  
[CALLOUTS](#CALLOUTS)  
[SEE ALSO](#SEE ALSO)  
[AUTHOR](#AUTHOR)  
[REVISION](#REVISION)  

---

## NAME

PCRE - Perl-compatible regular expressions

## PCRE REGULAR EXPRESSION SYNTAX SUMMARY

The full syntax and semantics of the regular expressions that are supported by PCRE are described in the **pcrepattern** documentation. This document contains a quick-reference summary of the syntax.

## QUOTING

\\x where x is non-alphanumeric is a literal x  
\\Q...\\E treat enclosed characters as literal

## CHARACTERS

\\a alarm, that is, the BEL character (hex 07)  
\\cx "control-x", where x is any ASCII character  
\\e escape (hex 1B)  
\\f form feed (hex 0C)  
\\n newline (hex 0A)  
\\r carriage return (hex 0D)  
\\t tab (hex 09)  
\\0dd character with octal code 0dd  
\\ddd character with octal code ddd, or backreference  
\\o{ddd..} character with octal code ddd..  
\\xhh character with hex code hh  
\\x{hhh..} character with hex code hhh..

Note that \\0dd is always an octal code, and that \\8 and \\9 are the literal characters "8" and "9".

## CHARACTER TYPES

. any character except newline;  
in dotall mode, any character whatsoever  
\\C one data unit, even in UTF mode (best avoided)  
\\d a decimal digit  
\\D a character that is not a decimal digit  
\\h a horizontal white space character  
\\H a character that is not a horizontal white space character  
\\N a character that is not a newline  
\\p{_xx_} a character with the _xx_ property  
\\P{_xx_} a character without the _xx_ property  
\\R a newline sequence  
\\s a white space character  
\\S a character that is not a white space character  
\\v a vertical white space character  
\\V a character that is not a vertical white space character  
\\w a "word" character  
\\W a "non-word" character  
\\X a Unicode extended grapheme cluster

By default, \\d, \\s, and \\w match only ASCII characters, even in UTF-8 mode or in the 16- bit and 32-bit libraries. However, if locale-specific matching is happening, \\s and \\w may also match characters with code points in the range 128-255. If the PCRE\_UCP option is set, the behaviour of these escape sequences is changed to use Unicode properties and they match many more characters.

## GENERAL CATEGORY PROPERTIES FOR \\p and \\P

C Other  
Cc Control  
Cf Format  
Cn Unassigned  
Co Private use  
Cs Surrogate

L Letter  
Ll Lower case letter  
Lm Modifier letter  
Lo Other letter  
Lt Title case letter  
Lu Upper case letter  
L& Ll, Lu, or Lt

M Mark  
Mc Spacing mark  
Me Enclosing mark  
Mn Non-spacing mark

N Number  
Nd Decimal number  
Nl Letter number  
No Other number

P Punctuation  
Pc Connector punctuation  
Pd Dash punctuation  
Pe Close punctuation  
Pf Final punctuation  
Pi Initial punctuation  
Po Other punctuation  
Ps Open punctuation

S Symbol  
Sc Currency symbol  
Sk Modifier symbol  
Sm Mathematical symbol  
So Other symbol

Z Separator  
Zl Line separator  
Zp Paragraph separator  
Zs Space separator

## PCRE SPECIAL CATEGORY PROPERTIES FOR \\p and \\P

Xan Alphanumeric: union of properties L and N  
Xps POSIX space: property Z or tab, NL, VT, FF, CR  
Xsp Perl space: property Z or tab, NL, VT, FF, CR  
Xuc Univerally-named character: one that can be  
represented by a Universal Character Name  
Xwd Perl word: property Xan or underscore

Perl and POSIX space are now the same. Perl added VT to its space character set at release 5.18 and PCRE changed at release 8.34.

## SCRIPT NAMES FOR \\p AND \\P

Arabic, Armenian, Avestan, Balinese, Bamum, Bassa\_Vah, Batak, Bengali, Bopomofo, Brahmi, Braille, Buginese, Buhid, Canadian\_Aboriginal, Carian, Caucasian\_Albanian, Chakma, Cham, Cherokee, Common, Coptic, Cuneiform, Cypriot, Cyrillic, Deseret, Devanagari, Duployan, Egyptian\_Hieroglyphs, Elbasan, Ethiopic, Georgian, Glagolitic, Gothic, Grantha, Greek, Gujarati, Gurmukhi, Han, Hangul, Hanunoo, Hebrew, Hiragana, Imperial\_Aramaic, Inherited, Inscriptional\_Pahlavi, Inscriptional\_Parthian, Javanese, Kaithi, Kannada, Katakana, Kayah\_Li, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Latin, Lepcha, Limbu, Linear\_A, Linear\_B, Lisu, Lycian, Lydian, Mahajani, Malayalam, Mandaic, Manichaean, Meetei\_Mayek, Mende\_Kikakui, Meroitic\_Cursive, Meroitic\_Hieroglyphs, Miao, Modi, Mongolian, Mro, Myanmar, Nabataean, New\_Tai\_Lue, Nko, Ogham, Ol\_Chiki, Old\_Italic, Old\_North\_Arabian, Old\_Permic, Old\_Persian, Old\_South\_Arabian, Old\_Turkic, Oriya, Osmanya, Pahawh\_Hmong, Palmyrene, Pau\_Cin\_Hau, Phags\_Pa, Phoenician, Psalter\_Pahlavi, Rejang, Runic, Samaritan, Saurashtra, Sharada, Shavian, Siddham, Sinhala, Sora\_Sompeng, Sundanese, Syloti\_Nagri, Syriac, Tagalog, Tagbanwa, Tai\_Le, Tai\_Tham, Tai\_Viet, Takri, Tamil, Telugu, Thaana, Thai, Tibetan, Tifinagh, Tirhuta, Ugaritic, Vai, Warang\_Citi, Yi.

## CHARACTER CLASSES

\[...\] positive character class  
\[^...\] negative character class  
\[x-y\] range (can be used for hex characters)  
\[\[:xxx:\]\] positive POSIX named set  
\[\[:^xxx:\]\] negative POSIX named set

alnum alphanumeric  
alpha alphabetic  
ascii 0-127  
blank space or tab  
cntrl control character  
digit decimal digit  
graph printing, excluding space  
lower lower case letter  
print printing, including space  
punct printing, excluding alphanumeric  
space white space  
upper upper case letter  
word same as \\w  
xdigit hexadecimal digit

In PCRE, POSIX character set names recognize only ASCII characters by default, but some of them use Unicode properties if PCRE\_UCP is set. You can use \\Q...\\E inside a character class.

## QUANTIFIERS

? 0 or 1, greedy  
?+ 0 or 1, possessive  
?? 0 or 1, lazy  
\* 0 or more, greedy  
\*+ 0 or more, possessive  
\*? 0 or more, lazy  
\+ 1 or more, greedy  
++ 1 or more, possessive  
+? 1 or more, lazy  
{n} exactly n  
{n,m} at least n, no more than m, greedy  
{n,m}+ at least n, no more than m, possessive  
{n,m}? at least n, no more than m, lazy  
{n,} n or more, greedy  
{n,}+ n or more, possessive  
{n,}? n or more, lazy

## ANCHORS AND SIMPLE ASSERTIONS

\\b word boundary  
\\B not a word boundary  
^ start of subject  
also after internal newline in multiline mode  
\\A start of subject  
$ end of subject  
also before newline at end of subject  
also before internal newline in multiline mode  
\\Z end of subject  
also before newline at end of subject  
\\z end of subject  
\\G first matching position in subject

## MATCH POINT RESET

\\K reset start of match

\\K is honoured in positive assertions, but ignored in negative ones.

## ALTERNATION

expr|expr|expr...

## CAPTURING

(...) capturing group  
(?<name>...) named capturing group (Perl)  
(?’name’...) named capturing group (Perl)  
(?P<name>...) named capturing group (Python)  
(?:...) non-capturing group  
(?|...) non-capturing group; reset group numbers for  
capturing groups in each alternative

## ATOMIC GROUPS

(?>...) atomic, non-capturing group

## COMMENT

(?#....) comment (not nestable)

## OPTION SETTING

(?i) caseless  
(?J) allow duplicate names  
(?m) multiline  
(?s) single line (dotall)  
(?U) default ungreedy (lazy)  
(?x) extended (ignore white space)  
(?-...) unset option(s)

The following are recognized only at the very start of a pattern or after one of the newline or \\R options with similar syntax. More than one of them may appear.

(\*LIMIT\_MATCH=d) set the match limit to d (decimal number)  
(\*LIMIT\_RECURSION=d) set the recursion limit to d (decimal number)  
(\*NO\_AUTO\_POSSESS) no auto-possessification (PCRE\_NO\_AUTO\_POSSESS)  
(\*NO\_START\_OPT) no start-match optimization (PCRE\_NO\_START\_OPTIMIZE)  
(\*UTF8) set UTF-8 mode: 8-bit library (PCRE\_UTF8)  
(\*UTF16) set UTF-16 mode: 16-bit library (PCRE\_UTF16)  
(\*UTF32) set UTF-32 mode: 32-bit library (PCRE\_UTF32)  
(\*UTF) set appropriate UTF mode for the library in use  
(\*UCP) set PCRE\_UCP (use Unicode properties for \\d etc)

Note that LIMIT\_MATCH and LIMIT\_RECURSION can only reduce the value of the limits set by the caller of pcre\_exec(), not increase them.

## NEWLINE CONVENTION

These are recognized only at the very start of the pattern or after option settings with a similar syntax.

(\*CR) carriage return only  
(\*LF) linefeed only  
(\*CRLF) carriage return followed by linefeed  
(\*ANYCRLF) all three of the above  
(\*ANY) any Unicode newline sequence

## WHAT \\R MATCHES

These are recognized only at the very start of the pattern or after option setting with a similar syntax.

(\*BSR\_ANYCRLF) CR, LF, or CRLF  
(\*BSR\_UNICODE) any Unicode newline sequence

## LOOKAHEAD AND LOOKBEHIND ASSERTIONS

(?=...) positive look ahead  
(?!...) negative look ahead  
(?<=...) positive look behind  
(?<!...) negative look behind

Each top-level branch of a look behind must be of a fixed length.

## BACKREFERENCES

\\n reference by number (can be ambiguous)  
\\gn reference by number  
\\g{n} reference by number  
\\g{-n} relative reference by number  
\\k<name> reference by name (Perl)  
\\k’name’ reference by name (Perl)  
\\g{name} reference by name (Perl)  
\\k{name} reference by name (.NET)  
(?P=name) reference by name (Python)

## SUBROUTINE REFERENCES (POSSIBLY RECURSIVE)

(?R) recurse whole pattern  
(?n) call subpattern by absolute number  
(?+n) call subpattern by relative number  
(?-n) call subpattern by relative number  
(?&name) call subpattern by name (Perl)  
(?P>name) call subpattern by name (Python)  
\\g<name> call subpattern by name (Oniguruma)  
\\g’name’ call subpattern by name (Oniguruma)  
\\g<n> call subpattern by absolute number (Oniguruma)  
\\g’n’ call subpattern by absolute number (Oniguruma)  
\\g<+n> call subpattern by relative number (PCRE extension)  
\\g’+n’ call subpattern by relative number (PCRE extension)  
\\g<-n> call subpattern by relative number (PCRE extension)  
\\g’-n’ call subpattern by relative number (PCRE extension)

## CONDITIONAL PATTERNS

(?(condition)yes-pattern)  
(?(condition)yes-pattern|no-pattern)

(?(n)... absolute reference condition  
(?(+n)... relative reference condition  
(?(-n)... relative reference condition  
(?(<name>)... named reference condition (Perl)  
(?(’name’)... named reference condition (Perl)  
(?(name)... named reference condition (PCRE)  
(?(R)... overall recursion condition  
(?(Rn)... specific group recursion condition  
(?(R&name)... specific recursion condition  
(?(DEFINE)... define subpattern for reference  
(?(assert)... assertion condition

## BACKTRACKING CONTROL

The following act immediately they are reached:

(\*ACCEPT) force successful match  
(\*FAIL) force backtrack; synonym (\*F)  
(\*MARK:NAME) set name to be passed back; synonym (\*:NAME)

The following act only when a subsequent match failure causes a backtrack to reach them. They all force a match failure, but they differ in what happens afterwards. Those that advance the start-of-match point do so only if the pattern is not anchored.

(\*COMMIT) overall failure, no advance of starting point  
(\*PRUNE) advance to next starting character  
(\*PRUNE:NAME) equivalent to (\*MARK:NAME)(\*PRUNE)  
(\*SKIP) advance to current matching position  
(\*SKIP:NAME) advance to position corresponding to an earlier  
(\*MARK:NAME); if not found, the (\*SKIP) is ignored  
(\*THEN) local failure, backtrack to next alternation  
(\*THEN:NAME) equivalent to (\*MARK:NAME)(\*THEN)

## CALLOUTS

(?C) callout  
(?Cn) callout with data n

## SEE ALSO

**pcrepattern**(3), **pcreapi**(3), **pcrecallout**(3), **pcrematching**(3), **pcre**(3).

## AUTHOR

Philip Hazel  
University Computing Service  
Cambridge CB2 3QH, England.

## REVISION

Last updated: 08 January 2014  
Copyright (c) 1997-2014 University of Cambridge.

---
